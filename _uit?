########################################################################
#  In te sluiten in lang durende reeksen of lussen van bash shellopdrachten, om
#  a.d.h.v. de naam van het bronbestand van dit script, of van een link ernaar,
#  die processen te controleren.
#
#  Gebruik :
#  - stel een variabele in met als naam "epcdir", en als waarde de directory
#   waarin dit script (of een link ernaar) staat:
#     epcdir="moederdirectory van dit bestand/"
#  - sluit dit script in met de opdracht "source" of ".", en met een
#   joker '*' voor de mogelijke namen van zijn bronbestand (zie 'Werking') :
#     source "$epcdir/_uit"*
#     OF
#     . "$epcdir/_uit"*
#  - zorg dat in "$epcdir/" slechts 1 naam (DIT bestand of een link ernaar) past
#   bij de joker, zoniet hangt de werking af van de expansievolgorde ervan: de
#   naam van de 1ste expansie wordt uitgevoerd, met de andere namen als
#   parameter.
#  - als de expansie van de joker geen bestandsnaam vindt, geeft bash een fout
#   voor de source-opdracht. Die boodschap (en alle andere op stderr) kunt ge
#   laten verdwijnen naar device null :
#     source "$epcdir/_uit"* 2>/dev/null
#    - enkel die foutboodschap uit stderr wegfilteren, met behoud van stdout :
#       { source "$epcdir/_uit"* 2>&1 1>&3 | grep -v ': No such file or directory' >&2; } 3>&1
#  - het proces moet uitvoeren met schrijftoegang tot die directory, zodat het
#   ingesloten script de naam van zijn bronbestand kan wijzigen als deel van
#   zijn werking.
#
#  Werking :
#  - noem dit bestand "_uit?" om dit script te neutraliseren.
#  - noem dit bestand "_uit", om de computer uit te zetten wanneer de shell de
#   plaats bereikt waar dit script is ingesloten; vooraf hernoemt dit script
#   zichzelf tot "_uit?", om geneutraliseerd te zijn wanneer de computer terug
#   wordt opgestart.
#  - om meerdere shell-processsen gecoördineerd de computer te laten uitzetten,
#   wanneer ze elk op een punt gekomen zijn waar dit script is ingesloten, noemt
#   u dit bestand "_uit2" tot "_uit9", waar het cijfer het aantal te coördineren
#   shell-processen is, maximaal 9 dus. In elk shell-proces dat het punt van
#   insluiting bereikt, verlaagt dit script dat cijfer in de naam van zijn
#   bronbestand met 1 ("_uit2" hernoemt zich als laatste naar "_uit" i.p.v.
#   "_uit1"), en wacht het tot uiteindelijk de laatste shell op het insluitpunt
#   komt en de computer uitschakelt.
#
#  Benodigdheden :
#  - Een script "uit" ergens op het pad (b.v. in ~/bin/), dat de computer
#   ordentelijk uit zet. Dat kan b.v. de opdracht "shutdown now" zijn, met evt.
#   toevoegingen naar wens.
#  
[ -n "$epcdir" -a -f "$epcdir/_uit"  ] && { mv "$epcdir/_uit"  "$epcdir/_uit?"; ~/bin/uit; }
[ -n "$epcdir" -a -f "$epcdir/_uit"[2-9] ] && {
	num=$(echo "$epcdir/_uit"[2-9]);# no pathname expansion in variable assignment, force it with $(echo ...)
	# split of the sequence number and decrement. But rename to _uit instead of _uit1
	num=${num: -1};
	[ $num -gt 2 ] &&
		mv "$epcdir/_uit"[2-9] "$epcdir/_uit"$((num-1)) ||
		mv "$epcdir/_uit"[2-9] "$epcdir/_uit"; 
	echo "Wacht op ander proces dat pc '_uit' zet";
	while true;do sleep 10m; done;
}
