########################################################################
#  In te sluiten in lang durende reeksen of lussen van bash shellopdrachten, om
#  a.d.h.v. de naam van het bronbestand van dit script, of van een link ernaar,
#  die processen te controleren.
#
#  Gebruik :
#  - stel een variabele in met als naam "epcdir", en als waarde de directory
#   waarin dit script (of een link ernaar) staat:
#     epcdir="moederdirectory van dit bestand/"
#  - Vorm 1: sluit dit script in met de opdracht "source" of ".", en met een
#   joker '*' voor de mogelijke namen van zijn bronbestand (zie 'Werking') :
#     source "$epcdir/_pauze"*
#     OF
#     . "$epcdir/_pauze"*
#  - Vorm 2: om in meerdere shells of op meerdere punten van een script of
#   andere reeks opdrachten naar keuze te pauzeren, voegt u een parameter toe
#   achter de insluiting, met de naam van het script + een unieke suffix om
#   enkel op dat punt te pauzeren (zie 'Werking' voor details). Voorbeeld :
#     . "$epcdir/_pauze"* _pauzeLijn12
#     OF
#     . "$epcdir/_pauze"* _pauzeTmnl3
#  - zorg dat in "$epcdir/" slechts 1 naam (DIT bestand of een link ernaar) past
#   bij de joker, zoniet hangt de werking af van de expansievolgorde ervan: de
#   naam van de 1ste expansie wordt uitgevoerd, met de andere namen als
#   parameter, als in Vorm 2.
#  - als de expansie van de joker geen bestandsnaam vindt, geeft bash een fout
#   voor de source-opdracht. Die boodschap (en alle andere op stderr) kunt ge
#   laten verdwijnen naar device null :
#     source "$epcdir/_pauze"* 2>/dev/null
#    - enkel die foutboodschap uit stderr wegfilteren, met behoud van stdout :
#       { source "$epcdir/_pauze"* 2>&1 1>&3 | grep -v ': No such file or directory' >&2; } 3>&1
#
#  Werking :
#  - Vorm 1 en 2: noem dit bestand "_pauze?" om dit script te neutraliseren.
#  - Vorm 1 en 2: noem dit bestand "_pauze", om het proces telkens 1 minuut te
#   pauzeren, zolang het die naam heeft, op elk punt in de reeks opdrachten waar
#   het script werd ingesloten.
#  - Vorm 2: geef de bestandsnaam hetzelfde suffix als de parameter van Vorm2,
#   b.v. "_pauzeLijn12" voor het vb. onder 'Gebruik', om enkel te pauzeren op de
#   punten waar de naam met dat suffix als parameter is opgegeven.
#  - Vorm 2 met regular expression: geef de bestandsnaam een regular expression
#   als suffix, om enkel te pauzeren op de punten waarvan de parameter past bij
#   die regular expression. Met de bestandsnaam "_pauzeTmnl[13]" b.v, zal dit
#   script wel pauzeren op de parameters '_pauzeTmnl1' en '_pauzeTmnl3', maar
#   NIET op '_pauzeTmnl2'. Let wel: een lopende pauzering stopt, wanneer ge de
#   bestandsnaam wijzigt, zelf als die nieuwe naam ook past op de parameter.
#
#  Benodigdheden :
#  	- geen
#
	# "${BASH_SOURCE[0]}" : bestandsnaam van bron van source-opdracht, alsof dit een functie-aanroep is (zie ook bash-variable FUNCNAME)
	# - Versie 1: In een andere shell dan bash zou de while-test de volgende kunnen zijn:
	#  	while [ -f "$epcdir/_pauze" ] || [ -f "$epcdir/_pauze"* -a "$epcdir/_pauze"* = "$epcdir/${@: -1}" ]
	# - Versie 2: pauze als (de link naar) dit bestand ofwel "_pauze" heet, ofwel heet zoals de laatste expansie van "_pauze"*,
	#  en zolang dit script nog onder die naam bestaat
	#  	while [ -f "$epcdir/_pauze" ] || [ "${BASH_SOURCE[0]}" = "$epcdir/${@: -1}" -a -f "$epcdir/${@: -1}" ]
	# - Versie 3: zoals versie 2, maar suffix van (de link naar) dit bestand mag een regex zijn, zodat die meerdere parameters kan matchen
	#  	[[ =~ ]] match alles van het rechteroperand tussen "" letterlijk, de rest als regex; dus splitsen we BASH_SOURCE[0] op
	#  	in het bekende vaste deel "$epcdir/_pauze", tss. "", en het suffix dat een regex mag zijn
while [ -f "$epcdir/_pauze" ] || [[ "$epcdir/${@: -1}" =~ ^"$epcdir/_pauze"${BASH_SOURCE[0]#"$epcdir/_pauze"}$ && -f "${BASH_SOURCE[0]}" ]]
do
	echo "PAUZE GEVRAAGD (telkens 1 minuut)"
	sleep 1m
done
